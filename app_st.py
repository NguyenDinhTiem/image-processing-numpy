import streamlit as st
import numpy as np
import cv2
from rembg import remove
import os
def main():
    st.title("Si√™u ·ª®ng D·ª•ng X·ªãn Nh·∫•t Th·∫ø Gi·ªõi üòç")
    # L·ª±a ch·ªçn ch·ª©c nƒÉng bi·∫øn ƒë·ªïi
    st.sidebar.subheader("Ch·ª©c nƒÉng bi·∫øn ƒë·ªïi")
    transformation = st.sidebar.selectbox(
        "Ch·ªçn ch·ª©c nƒÉng",
        ("X√≥a n·ªÅn", "Ph√≥ng to", "Thu nh·ªè", "L·∫≠t ·∫£nh ngang", "L·∫≠t ·∫£nh d·ªçc")
    )
    # T·∫£i l√™n h√¨nh ·∫£nh
    uploaded_file = st.file_uploader("Ch·ªçn m·ªôt h√¨nh ·∫£nh", type=["png", "jpg", "jpeg"])

    if uploaded_file is not None:
        # ƒê·ªçc h√¨nh ·∫£nh v√† hi·ªÉn th·ªã
        image = cv2.imdecode(np.frombuffer(uploaded_file.read(), np.uint8), 1)
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        st.image(image, caption='H√¨nh ·∫£nh ƒë√£ t·∫£i l√™n')

        # √Åp d·ª•ng ch·ª©c nƒÉng bi·∫øn ƒë·ªïi
        transformed_image = apply_transformation(image, transformation)

        # Hi·ªÉn th·ªã h√¨nh ·∫£nh sau khi bi·∫øn ƒë·ªïi
        st.subheader("H√¨nh ·∫£nh sau khi bi·∫øn ƒë·ªïi")
        st.image(transformed_image, caption='H√¨nh ·∫£nh ƒë√£ bi·∫øn ƒë·ªïi')

        # L∆∞u k·∫øt qu·∫£ th√†nh file ·∫£nh
        save_path = "result.png"
     
        save_image(transformation, transformed_image, save_path)
        
        # T·∫£i xu·ªëng file ·∫£nh
        with open(save_path, "rb") as file:
            btn = st.download_button(
                    label="Download image",
                    data=file,
                    file_name="result.png",
                    mime="image/png"
                )
def apply_transformation(image, transformation):
    if transformation == "X√≥a n·ªÅn":
        transformed_image = remove(image)
    elif transformation == "Ph√≥ng to":
        transformed_image = cv2.resize(image, None, fx=1.5, fy=1.5, interpolation=cv2.INTER_LINEAR)
    elif transformation == "Thu nh·ªè":
        fxy = st.slider('L·ª±a ch·ªçn m·ª©c thu nh·ªè?', 0.0, 1.0, 0.25)
        transformed_image = cv2.resize(image, None, fx=fxy, fy=fxy, interpolation=cv2.INTER_LINEAR)
    elif transformation == "L·∫≠t ·∫£nh ngang":
        transformed_image = cv2.flip(image, 1)
    elif transformation == "L·∫≠t ·∫£nh d·ªçc":
        transformed_image = cv2.flip(image, 0)
    else:
        transformed_image = image
    return transformed_image

def save_image(transformation, image, save_path):
    if transformation == "X√≥a n·ªÅn":
        cv2.imwrite(save_path, image)
    else:
        cv2.imwrite(save_path, cv2.cvtColor(image, cv2.COLOR_RGB2BGR))

if __name__ == '__main__':
    main()
